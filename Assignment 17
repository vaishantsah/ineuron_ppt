1. Question 1
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

def firstUniqChar(s):
    char_count = {}  # dictionary to store character frequency

    # Count the frequency of each character
    for char in s:
        char_count[char] = char_count.get(char, 0) + 1

    # Find the first non-repeating character
    for i in range(len(s)):
        if char_count[s[i]] == 1:
            return i

    return -1

# Example usage:
s = "leetcode"
result = firstUniqChar(s)
print(result)  # Output: 0

s = "loveleetcode"
result = firstUniqChar(s)
print(result)  # Output: 2

s = "aabb"
result = firstUniqChar(s)
print(result)  # Output: -1

2. Question 2:
Given a circular integer array nums of length `n`, return *the maximum possible sum of a non-empty subarray of `nums`.
A circular array means the end of the array connects to the beginning of the array. Formally, the next element of `nums[i]` is `nums[(i + 1) % n]` and 
the previous element of `nums[i]` is `nums[(i - 1 + n) % n]`.
A subarray may only include each element of the fixed buffer `nums` at most once. Formally, for a subarray `nums[i], nums[i + 1], ..., nums[j]`,
there does not exist `i <= k1`, `k2 <= j` with `k1 % n == k2 % n`.

def maxSubarraySumCircular(nums):
    n = len(nums)
    # Case 1: Subarray does not wrap around
    max_sum = float('-inf')
    curr_max = 0

    for i in range(n):
        curr_max = max(nums[i], curr_max + nums[i])
        max_sum = max(max_sum, curr_max)

    # Case 2: Subarray wraps around
    min_sum = float('inf')
    curr_min = 0
    total_sum = 0

    for i in range(n):
        curr_min = min(nums[i], curr_min + nums[i])
        min_sum = min(min_sum, curr_min)
        total_sum += nums[i]

    # If all elements are negative, return the maximum element
    if total_sum == min_sum:
        return max_sum

    # Return the maximum of Case 1 and Case 2
    return max(max_sum, total_sum - min_sum)

nums1 = [1, -2, 3, -2]
print(maxSubarraySumCircular(nums1))  # Output: 3

nums2 = [5, -3, 5]
print(maxSubarraySumCircular(nums2))  # Output: 10

nums3 = [-3, -2, -3]
print(maxSubarraySumCircular(nums3))  # Output: -2

3. Question 3
The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. 
Each student either prefers square or circular sandwiches.The number of sandwiches in the cafeteria is equal to the number of students.
The sandwiches are placed in a stack. At each step:
- If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
- Otherwise, they will leave it and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.
You are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `ith` sandwich in the stack (`i = 0` is the top of the stack) 
and `students[j]` is the preference of the `jth` student in the initial queue (`j = 0` is the front of the queue).Return the number of students that are unable to eat.

def countStudents(students, sandwiches):
    student_index = 0
    sandwich_index = 0
    n = len(students)

    while student_index < n and sandwich_index < n:
        if students[student_index] == sandwiches[sandwich_index]:
            student_index += 1
            sandwich_index += 1
        else:
            student_index += 1
            students.append(students[student_index-1])
    
    return n - student_index

students1 = [1, 1, 0, 0]
sandwiches1 = [0, 1, 0, 1]
print(countStudents(students1, sandwiches1))  # Output: 0

students2 = [1, 1, 1, 0, 0, 1]
sandwiches2 = [1, 0, 0, 0, 1, 1]
print(countStudents(students2, sandwiches2))  # Output: 3

4. Question 4:
You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.
Implement the `RecentCounter` class:
- `RecentCounter()` Initializes the counter with zero recent requests.
- `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). 
Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.
It is guaranteed that every call to `ping` uses a strictly larger value of `t` than the previous call.

from collections import deque

class RecentCounter:
    def __init__(self):
        self.requests = deque()

    def ping(self, t: int) -> int:
        self.requests.append(t)
        while self.requests[0] < t - 3000:
            self.requests.popleft()
        return len(self.requests)

recentCounter = RecentCounter()
print(recentCounter.ping(1))     # Output: 1
print(recentCounter.ping(100))   # Output: 2
print(recentCounter.ping(3001))  # Output: 3
print(recentCounter.ping(3002))  # Output: 3

5. Question 5
There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in clockwise order.
More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.
The rules of the game are as follows:

1. Start at the `1st` friend.
2. Count the next `k` friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
3. The last friend you counted leaves the circle and loses the game.
4. If there is still more than one friend in the circle, go back to step `2` starting from the friend immediately clockwise of the friend who just lost and repeat.
5. Else, the last friend in the circle wins the game.

Given the number of friends, `n`, and an integer `k`, return the winner of the game.

from collections import deque

def findTheWinner(n: int, k: int) -> int:
    friends = deque(range(1, n + 1))

    while len(friends) > 1:
        friends.rotate(-(k - 1))
        friends.popleft()

    return friends[0]
print(findTheWinner(5, 2))  # Output: 3
print(findTheWinner(6, 5))  # Output: 1

6. Question 6:
You are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`.
You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.
You will do the following steps repeatedly until all cards are revealed:

1. Take the top card of the deck, reveal it, and take it out of the deck.
2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.

Return an ordering of the deck that would reveal the cards in increasing order.
Note that the first entry in the answer is considered to be the top of the deck.

from collections import deque
from heapq import merge

def deckRevealedIncreasing(deck):
    deck.sort()  # Sort the deck in ascending order
    queue = deque()

    # Initialize the queue with indices from 0 to n-1
    for i in range(len(deck)):
        queue.append(i)

    result = [0] * len(deck)

    # Reveal and reorder the cards
    for card in deck:
        result[queue.popleft()] = card
        if queue:
            queue.append(queue.popleft())

    return result

print(deckRevealedIncreasing([17, 13, 11, 2, 3, 5, 7]))
# Output: [2, 13, 3, 11, 5, 17, 7]

print(deckRevealedIncreasing([1, 1000]))
# Output: [1, 1000]

7. Question 7
Design a queue that supports `push` and `pop` operations in the front, middle, and back.

Implement the `FrontMiddleBack` class:

- `FrontMiddleBack()` Initializes the queue.
- `void pushFront(int val)` Adds `val` to the **front** of the queue.
- `void pushMiddle(int val)` Adds `val` to the **middle** of the queue.
- `void pushBack(int val)` Adds `val` to the **back** of the queue.
- `int popFront()` Removes the **front** element of the queue and returns it. If the queue is empty, return `1`.
- `int popMiddle()` Removes the **middle** element of the queue and returns it. If the queue is empty, return `1`.
- `int popBack()` Removes the **back** element of the queue and returns it. If the queue is empty, return `1`.

**Notice** that when there are **two** middle position choices, the operation is performed on the **frontmost** middle position choice. For example:

- Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.
- Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.

class ListNode:
    def __init__(self, val):
        self.val = val
        self.prev = None
        self.next = None


class FrontMiddleBackQueue:
    def __init__(self):
        self.head = None
        self.middle = None
        self.size = 0

    def pushFront(self, val):
        new_node = ListNode(val)
        if not self.head:
            self.head = new_node
            self.middle = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
            if self.size % 2 == 0:
                self.middle = self.middle.prev
        self.size += 1

    def pushMiddle(self, val):
        new_node = ListNode(val)
        if not self.head:
            self.head = new_node
            self.middle = new_node
        else:
            if self.size % 2 == 0:
                self.middle = self.middle.prev
            new_node.prev = self.middle
            new_node.next = self.middle.next
            if self.middle.next:
                self.middle.next.prev = new_node
            self.middle.next = new_node
            self.middle = new_node
        self.size += 1

    def pushBack(self, val):
        new_node = ListNode(val)
        if not self.head:
            self.head = new_node
            self.middle = new_node
        else:
            cur = self.head
            while cur.next:
                cur = cur.next
            cur.next = new_node
            new_node.prev = cur
            if self.size % 2 == 1:
                self.middle = self.middle.next
        self.size += 1

    def popFront(self):
        if not self.head:
            return -1
        val = self.head.val
        if self.head.next:
            self.head.next.prev = None
        self.head = self.head.next
        if self.size % 2 == 0:
            self.middle = self.middle.next
        self.size -= 1
        return val

    def popMiddle(self):
        if not self.head:
            return -1
        val = self.middle.val
        if self.middle.prev:
            self.middle.prev.next = self.middle.next
        if self.middle.next:
            self.middle.next.prev = self.middle.prev
        if self.size % 2 == 0:
            self.middle = self.middle.next
        else:
            self.middle = self.middle.prev
        self.size -= 1
        return val

    def popBack(self):
        if not self.head:
            return -1
        cur = self.head
        while cur.next:
            cur = cur.next
        val = cur.val
        if cur.prev:
            cur.prev.next = None
        if self.size % 2 == 1:
            self.middle = self.middle.prev
        self.size -= 1
        return val

q = FrontMiddleBackQueue()
print(q.pushFront(1))     # Output: None
print(q.pushBack(2))      # Output: None
print(q.pushMiddle(3))    # Output: None
print(q.pushMiddle(4))    # Output: None
print(q.popFront())       # Output: 1


8. Question 8
For a stream of integers, implement a data structure that checks if the last `k` integers parsed in the stream are equal to `value`.

Implement the DataStream class:
- `DataStream(int value, int k)` Initializes the object with an empty integer stream and the two integers `value` and `k`.
- `boolean consec(int num)` Adds `num` to the stream of integers. Returns `true` if the last `k` integers are equal to `value`, and `false` otherwise.
If there are less than `k` integers, the condition does not hold true, so returns `false`.

from collections import deque

class DataStream:
    def __init__(self, value, k):
        self.value = value
        self.k = k
        self.queue = deque()

    def consec(self, num):
        self.queue.append(num)
        if len(self.queue) >= self.k:
            last_k = list(self.queue)[-self.k:]
            if all(x == self.value for x in last_k):
                return True
        return False

dataStream = DataStream(4, 3)
print(dataStream.consec(4))     # Output: False
print(dataStream.consec(4))     # Output: False
print(dataStream.consec(4))     # Output: True
print(dataStream.consec(3))     # Output: False
