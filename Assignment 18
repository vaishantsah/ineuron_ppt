1. Question 1
Given an array of intervals where intervals[i] = [starti, endi],merge all overlapping intervals, and return an array of the non-overlapping intervals that cover 
all the intervals in the input.

def merge_intervals(intervals):
    if not intervals:
        return []

    intervals.sort(key=lambda x: x[0])  # Sort intervals based on start times
    merged = [intervals[0]]  # Initialize result array with the first interval

    for interval in intervals[1:]:
        if interval[0] <= merged[-1][1]:  # Check for overlap with last interval in the result array
            merged[-1][1] = max(merged[-1][1], interval[1])  # Update the end time of the last interval
        else:
            merged.append(interval)  # Add the current interval to the result array

    return merged

intervals = [[1,3],[2,6],[8,10],[15,18]]
print(merge_intervals(intervals))


2. Question 2
Sort Colors
Given an array `nums` with `n` objects colored red, white, or blue, sort them [in-place](https://en.wikipedia.org/wiki/In-place_algorithm) so that objects of the 
same color are adjacent, with the colors in the order red, white, and blue.We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue,respectively.

You must solve this problem without using the library's sort function.

def sortColors(nums):
    low = 0
    mid = 0
    high = len(nums) - 1

    while mid <= high:
        if nums[mid] == 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low += 1
            mid += 1
        elif nums[mid] == 1:
            mid += 1
        else:  # nums[mid] == 2
            nums[mid], nums[high] = nums[high], nums[mid]
            high -= 1

    return nums
nums = [2, 0, 2, 1, 1, 0]
print(sortColors(nums))

3. Question 3
First Bad Version Solution
You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check.
Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

def firstBadVersion(n):
    left = 1
    right = n

    while left < right:
        mid = left + (right - left) // 2  # Avoid integer overflow

        if isBadVersion(mid):
            right = mid
        else:
            left = mid + 1

    return left
n = 5
bad = 4
print(firstBadVersion(n))

4. Question 4
Maximum Gap
Given an integer array `nums`, return *the maximum difference between two successive elements in its sorted form*. If the array contains less than two elements, 
return `0`.

You must write an algorithm that runs in linear time and uses linear extra space.

def maximumGap(nums):
    if len(nums) < 2:
        return 0

    # Find the maximum element in the array
    max_num = max(nums)

    # Perform radix sort
    exp = 1
    while max_num // exp > 0:
        count = [0] * 10
        output = [0] * len(nums)

        # Count the frequency of each digit
        for num in nums:
            digit = (num // exp) % 10
            count[digit] += 1

        # Calculate the cumulative count
        for i in range(1, 10):
            count[i] += count[i - 1]

        # Build the sorted output array
        for i in range(len(nums) - 1, -1, -1):
            num = nums[i]
            digit = (num // exp) % 10
            output[count[digit] - 1] = num
            count[digit] -= 1

        # Update the input array with the sorted output
        nums = output
        exp *= 10

    # Calculate the maximum difference between successive elements
    max_diff = 0
    for i in range(1, len(nums)):
        max_diff = max(max_diff, nums[i] - nums[i - 1])

    return max_diff


5. Question 5
Contains Duplicate
Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.

def containsDuplicate(nums):
    num_set = set()

    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)

    return False


6. Question 6
Minimum Number of Arrows to Burst Balloons

There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where 
`points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates
of the balloons.
Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is burst 
by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, 
bursting any balloons in its path.
Given the array `points`, return the minimum number of arrows that must be shot to burst all balloons.

def findMinArrowShots(points):
    if not points:
        return 0

    # Sort the balloons based on their end points
    points.sort(key=lambda x: x[1])

    arrows = 1
    prev_end = points[0][1]

    for i in range(1, len(points)):
        # If the current balloon's start point is after the previous end point,
        # we need to shoot a new arrow
        if points[i][0] > prev_end:
            arrows += 1
            prev_end = points[i][1]

    return arrows


7. Question 7
Longest Increasing Subsequence
Given an integer array `nums`, return *the length of the longest strictly increasing subsequence.
def lengthOfLIS(nums):
    n = len(nums)
    dp = [1] * n

    for i in range(n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)


8. Question 8
132 Pattern

Given an array of `n` integers `nums`, a 132 pattern is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.
def find132pattern(nums):
    stack = []
    s3 = float('-inf')

    for i in range(len(nums) - 1, -1, -1):
        if nums[i] < s3:
            return True
        while stack and nums[i] > stack[-1]:
            s3 = stack.pop()
        stack.append(nums[i])

    return False
