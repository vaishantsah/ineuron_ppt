1. Question 1
Merge k Sorted Lists

You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    min_heap = []

    # Push the first node of each list into the min-heap
    for i in range(len(lists)):
        if lists[i]:
            heapq.heappush(min_heap, (lists[i].val, i))

    # Create a dummy node as the head of the merged list
    dummy = ListNode(0)
    curr = dummy

    # Continue until the min-heap is empty
    while min_heap:
        val, idx = heapq.heappop(min_heap)
        node = lists[idx]
        curr.next = node
        curr = curr.next

        # Move to the next node in the list
        if node.next:
            lists[idx] = node.next
            heapq.heappush(min_heap, (node.next.val, idx))

    return dummy.next


2. Question 2
Count of Smaller Numbers After Self

Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].

class Pair:
    def __init__(self, num, index):
        self.num = num
        self.index = index

def countSmallerNumbersAfterSelf(nums):
    def countSmaller(nums, indices):
        if len(indices) <= 1:
            return []

        mid = (indices[0] + indices[-1]) // 2
        leftCounts = countSmaller(nums, indices[:mid+1])
        rightCounts = countSmaller(nums, indices[mid+1:])
        merged = []
        leftIdx, rightIdx, count = 0, 0, 0

        while leftIdx < len(leftCounts) and rightIdx < len(rightCounts):
            if leftCounts[leftIdx].num <= rightCounts[rightIdx].num:
                merged.append(leftCounts[leftIdx])

3. Question 3
Sort an Array
Given an array of integers `nums`, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in `O(nlog(n))` time complexity and with the smallest space complexity possible.

def mergeSort(nums, start, end):
    if start < end:
        mid = (start + end) // 2
        mergeSort(nums, start, mid)
        mergeSort(nums, mid + 1, end)
        merged = []
        leftIdx, rightIdx = start, mid + 1

        while leftIdx <= mid and rightIdx <= end:
            if nums[leftIdx] <= nums[rightIdx]:
                merged.append(nums[leftIdx])
                leftIdx += 1
            else:
                merged.append(nums[rightIdx])
                rightIdx += 1

        merged.extend(nums[leftIdx:mid + 1])
        merged.extend(nums[rightIdx:end + 1])

        for i in range(start, end + 1):
            nums[i] = merged[i - start]

def sortArray(nums):
    result = nums.copy()
    mergeSort(result, 0, len(result) - 1)
    return result

4. Question 4
Move all zeroes to end of array
Given an array of random numbers, Push all the zero’s of a given array to the end of the array. For example, if the given array is
{1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0}, it should be changed to {1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0}. The order of all other elements should be same.
Expected time complexity is O(n) and extra space is O(1).

def moveZeroes(nums):
    left = 0
    for right in range(len(nums)):
        if nums[right] != 0:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
    return nums

print(moveZeroes([1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0]))
# Output: [1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0]

print(moveZeroes([1, 2, 0, 4, 3, 0, 5, 0]))
# Output: [1, 2, 4, 3, 5, 0, 0, 0]

print(moveZeroes([1, 2, 0, 0, 0, 3, 6]))
# Output: [1, 2, 3, 6, 0, 0, 0]

5. Question 5
Rearrange array in alternating positive & negative items with O(1) extra space

Given an array of positive and negative numbers, arrange them in an alternate fashion such that every positive number is followed by a negative and vice-versa 
maintaining the order of appearance. The number of positive and negative numbers need not be equal. If there are more positive numbers they appear at the end of the array.
If there are more negative numbers, they too appear at the end of the array.

def rearrangeArray(nums):
    left = 0
    right = len(nums) - 1
    
    while left < right:
        # Find the first positive element from the left
        while left < len(nums) and nums[left] > 0:
            left += 1

        # Find the first negative element from the right
        while right >= 0 and nums[right] < 0:
            right -= 1

        # Swap the positive and negative elements
        if left < right:
            nums[left], nums[right] = nums[right], nums[left]
    
    return nums

print(rearrangeArray([1, 2, 3, -4, -1, 4]))
# Output: [-4, 1, -1, 2, 3, 4]

print(rearrangeArray([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8]))
# Output: [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]

6. Question 6
Merge two sorted arrays
Given two sorted arrays, the task is to merge them in a sorted manner.

def mergeArrays(arr1, arr2):
    n1 = len(arr1)
    n2 = len(arr2)
    result = []
    i = 0
    j = 0
    
    while i < n1 and j < n2:
        if arr1[i] <= arr2[j]:
            result.append(arr1[i])
            i += 1
        else:
            result.append(arr2[j])
            j += 1
    
    while i < n1:
        result.append(arr1[i])
        i += 1
    
    while j < n2:
        result.append(arr2[j])
        j += 1
    
    return result

print(mergeArrays([1, 3, 4, 5], [2, 4, 6, 8]))
# Output: [1, 2, 3, 4, 4, 5, 6, 8]

print(mergeArrays([5, 8, 9], [4, 7, 8]))
# Output: [4, 5, 7, 8, 8, 9]

7. Question 7
Intersection of Two Arrays
Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

def intersection(nums1, nums2):
    set1 = set(nums1)
    result = []
    for num in nums2:
        if num in set1 and num not in result:
            result.append(num)
    return result

nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
print(intersection(nums1, nums2))
# Output: [2]

nums1 = [4, 9, 5]
nums2 = [9, 4, 9, 8, 4]
print(intersection(nums1, nums2))
# Output: [9, 4]


8. Question 8
The intersection of Two Arrays II
Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays
and you may return the result in any order.

def intersect(nums1, nums2):
    freq_map = {}
    for num in nums1:
        freq_map[num] = freq_map.get(num, 0) + 1
    result = []
    for num in nums2:
        if num in freq_map and freq_map[num] > 0:
            result.append(num)
            freq_map[num] -= 1
    return result

nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
print(intersect(nums1, nums2))
# Output: [2, 2]

nums1 = [4, 9, 5]
nums2 = [9, 4, 9, 8, 4]
print(intersect(nums1, nums2))
# Output: [4, 9]
