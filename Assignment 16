1. Question 1
Given an array, for each element find the value of the nearest element to the right which is having a frequency greater than that of the current element.
If there does not exist an answer for a position, then make the value ‘-1’.

def findNearestGreaterFrequency(nums):
    frequency = {}
    result = []

    for num in reversed(nums):
        frequency[num] = frequency.get(num, 0) + 1
        nextGreaterFreq = None

        for i in range(nums.index(num) + 1, len(nums)):
            if frequency[nums[i]] > frequency[num]:
                nextGreaterFreq = nums[i]
                break

        if nextGreaterFreq is None:
            result.append(-1)
        else:
            result.append(nextGreaterFreq)

    return list(reversed(result))

# Example usage:
nums = [1, 1, 2, 3, 4, 2, 1]
result = findNearestGreaterFrequency(nums)
print(result)  # Output: [-1, -1, 1, 2, 2, 1, -1]

2. Question 2
Given a stack of integers, sort it in ascending order using another temporary stack.

def sortStack(stack):
    tempStack = []

    while stack:
        temp = stack.pop()

        while tempStack and tempStack[-1] > temp:
            stack.append(tempStack.pop())

        tempStack.append(temp)

    # Copy elements from temporary stack back to input stack
    while tempStack:
        stack.append(tempStack.pop())

# Example usage:
stack = [34, 3, 31, 98, 92, 23]
sortStack(stack)
print(stack)  # Output: [3, 23, 31, 34, 92, 98]

3. Question 3
Given a stack with push(), pop(), and empty() operations, The task is to delete the middle element of it without using any additional data structure.

def deleteMiddle(stack):
    if len(stack) == 0 or len(stack) == 1:
        return

    mid = stack.pop()

    deleteMiddle(stack)

    size = len(stack)

    if size % 2 == 0:
        stack.append(mid)

# Example usage:
stack = [1, 2, 3, 4, 5]
deleteMiddle(stack)
print(stack)  # Output: [1, 2, 4, 5]

stack = [1, 2, 3, 4, 5, 6]
deleteMiddle(stack)
print(stack)  # Output: [1, 2, 4, 5, 6]

4. Question 4
Given a Queue consisting of first **n** natural numbers (in random order).The task is to check whether the given Queue elements can be arranged in increasing order in another Queue using a stack.
The operation allowed are:

1. Push and pop elements from the stack
2. Pop (Or Dequeue) from the given Queue.
3. Push (Or Enqueue) in the another Queue.

from queue import Queue
from stack import Stack

def checkQueueOrder(queue):
    stack = Stack()
    tempQueue = Queue()
    expected = 1

    while not queue.empty():
        front = queue.get()

        if front == expected:
            expected += 1
        elif not stack.empty() and stack.top() == expected:
            stack.pop()
            expected += 1
        elif not stack.empty() and stack.top() > front:
            stack.push(front)
        else:
            return "No"

        while not tempQueue.empty():
            stack.push(tempQueue.get())

    while not stack.empty() and expected == stack.top():
        stack.pop()
        expected += 1

    if not stack.empty():
        return "No"
    else:
        return "Yes"

# Example usage:
queue = Queue()
queue.put(5)
queue.put(1)
queue.put(2)
queue.put(3)
queue.put(4)
print(checkQueueOrder(queue))  # Output: Yes

queue = Queue()
queue.put(5)
queue.put(1)
queue.put(2)
queue.put(6)
queue.put(3)
queue.put(4)
print(checkQueueOrder(queue))  # Output: No

5. Question 5
Given a number , write a program to reverse this number using stack.

from stack import Stack

def reverseNumber(num):
    num_str = str(num)
    stack = Stack()

    for digit in num_str:
        stack.push(digit)

    reversed_str = ""
    while not stack.empty():
        reversed_str += stack.pop()

    reversed_num = int(reversed_str)
    return reversed_num

# Example usage:
num1 = 365
print(reverseNumber(num1))  # Output: 563

num2 = 6899
print(reverseNumber(num2))  # Output: 9986

6. Question 6
Given an integer k and a [queue](https://www.geeksforgeeks.org/queue-data-structure/) of integers, The task is to reverse the order of the 
first k elements of the queue, leaving the other elements in the same relative order.
Only following standard operations are allowed on queue.

- enqueue(x) : Add an item x to rear of queue
- dequeue() : Remove an item from front of queue
- size() : Returns number of elements in queue.
- front() : Finds front item.

from queue import Queue
from stack import Stack

def reverseKElements(queue, k):
    if k <= 0 or k > queue.size():
        return queue

    stack = Stack()

    # Dequeue the first k elements and push them onto the stack
    for _ in range(k):
        element = queue.dequeue()
        stack.push(element)

    # Dequeue the remaining elements and enqueue them back into the queue
    while not queue.empty():
        element = queue.dequeue()
        queue.enqueue(element)

    # Pop the elements from the stack and enqueue them back into the queue
    while not stack.empty():
        element = stack.pop()
        queue.enqueue(element)

    return queue

# Example usage:
q = Queue()
q.enqueue(1)
q.enqueue(2)
q.enqueue(3)
q.enqueue(4)
q.enqueue(5)

k = 3
reversed_q = reverseKElements(q, k)
while not reversed_q.empty():
    print(reversed_q.front(), end=" ")
    reversed_q.dequeue()

# Output: 3 2 1 4 5

7. Question 7:
Given a sequence of n strings, the task is to check if any two similar words come together and then destroy each other then print the number of words left in the 
sequence after this pairwise destruction.

def countWordsLeft(sequence):
    stack = []

    for word in sequence:
        if not stack or word != stack[-1]:
            stack.append(word)
        else:
            stack.pop()

    return len(stack)

# Example usage:
sequence = ['ab', 'aa', 'aa', 'bcd', 'ab']
result = countWordsLeft(sequence)
print(result)  # Output: 3

sequence = ['tom', 'jerry', 'jerry', 'tom']
result = countWordsLeft(sequence)
print(result)  # Output: 0

8. Question 8
Given an array of integers, the task is to find the maximum absolute difference between the nearest left and the right smaller element of every element in the array.

Note: If there is no smaller element on right side or left side of any element then we take zero as the smaller element. For example for the leftmost element, 
the nearest smaller element on the left side is considered as 0. Similarly, for rightmost elements, the smaller element on the right side is considered as 0.

def maxAbsoluteDifference(arr):
    n = len(arr)
    LS = [0] * n  # left smaller array
    RS = [0] * n  # right smaller array
    maxDiff = 0  # maximum absolute difference

    # Find left smaller elements
    stack = []
    for i in range(n):
        while stack and stack[-1] >= arr[i]:
            stack.pop()
        if stack:
            LS[i] = stack[-1]
        stack.append(arr[i])

    # Clear the stack
    stack = []

    # Find right smaller elements
    for i in range(n - 1, -1, -1):
        while stack and stack[-1] >= arr[i]:
            stack.pop()
        if stack:
            RS[i] = stack[-1]
        stack.append(arr[i])

    # Calculate maximum absolute difference
    for i in range(n):
        diff = abs(LS[i] - RS[i])
        maxDiff = max(maxDiff, diff)

    return maxDiff

# Example usage:
arr = [2, 1, 8]
result = maxAbsoluteDifference(arr)
print(result)  # Output: 1

arr = [2, 4, 8, 7, 7, 9, 3]
result = maxAbsoluteDifference(arr)
print(result)  # Output: 4

arr = [5, 1, 9, 2, 5, 1, 7]
result = maxAbsoluteDifference(arr)
print(result)  # Output: 1
